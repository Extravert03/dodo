from typing import Optional, Iterable

import db
from telegram_bot import keyboards
from telegram_bot.responses.base import Response, ReplyMarkup


class StatisticsReportsNotConfiguredResponse(Response):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def get_text(self) -> Optional[str]:
        return ('–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω—É —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üòï\n'
                '–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>'
                ' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings.\n'
                '–î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û—Ç—á—ë—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</b> –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂.')


class DepartmentsListResponse(Response):

    def __init__(self, departments: Iterable[db.Department],
                 report_type_id: int,
                 region_id: int,
                 already_added_departments: Iterable[db.ForwardingReport],
                 *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__departments = departments
        self.__already_added_departments = already_added_departments
        self.__report_type_id = report_type_id
        self.__region_id = region_id

    def get_text(self) -> Optional[str]:
        return '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'

    def get_reply_markup(self) -> Optional[ReplyMarkup]:
        added_department_ids = {
            forwarding_report.department.id
            for forwarding_report in self.__already_added_departments}
        return keyboards.DepartmentsListMarkup(self.__departments, self.__report_type_id,
                                               self.__region_id, added_department_ids)


class DepartmentRegionsListResponse(Response):
    __slots__ = ('department_regions',)

    def __init__(self, department_regions: Iterable[db.DepartmentRegion], report_type_id: int,
                 *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__department_regions = department_regions
        self.__report_type_id = report_type_id

    def get_text(self) -> Optional[str]:
        return '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π'

    def get_reply_markup(self) -> Optional[ReplyMarkup]:
        return keyboards.DepartmentRegionsMarkup(self.__department_regions, self.__report_type_id)


class ReportTypesSettingsResponse(Response):
    __slots__ = ('__report_types',)

    def __init__(self, report_types: Iterable[db.ReportType], *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__report_types = report_types

    def get_text(self) -> Optional[str]:
        return '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ—Ç—á—ë—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å üëá'

    def get_reply_markup(self) -> Optional[ReplyMarkup]:
        return keyboards.ReportTypesMarkup(self.__report_types)
